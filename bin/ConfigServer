#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##
##      ConfigServer
##
##  DESCRIPTION
##
##      RasPi configuration server
##
##      Accept commands from a web socket and perform that function.
##
##  USAGE
##
##      ConfigServer [-v]
##
##      where:      -v      Verbose: print out things as they happen
##
##      $Config->
##          {SysName}->'raspberrypi',
##          {NetDevs}->[ 'eth0', 'wlan0', ... ],
##          {  About}->[ <list of about lines>... ],
##          {WPAInfo}->
##              {   Valid} => 1,        # TRUE if wpa_supplicant.conf file exists
##              {    SSID} => 'Okima',
##              { KeyMGMT} => 'WPA-PSK',
##              {Password} => '(something)',
##              { Country} => 'US'
##          {$IF}    ->                 # ie $Config->{"wlan0"}->...
##              {Enabled}-> => 0,
##              {   DHCP}-> => 1,
##              { IPAddr}-> => '192.168.1.31/24',
##              { Router}-> => '192.168.1.1',
##              {   DNS1}-> => '1.0.0.1',
##              {   DNS2}-> => '1.1.1.1',
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

our $VERSION = 'AppDaemon2020-10-20';

use JSON;
use Data::Dumper;
use File::Slurp qw(read_file write_file);

use lib "/root/AppDaemon/lib";

use Site::IWList;
use Site::Process;
use Site::WSServer;
use Site::NetInfo;
use Site::FSInfo;
use Site::RasPiUtils;

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

our $SERVER_PORT = 2021;

our $Server;
our $Config;

our $SysName;
our $NetDevs  = GetNetDevs();
our $WPAInfo  = GetWPAInfo();
our $DHCPInfo = GetDHCPInfo();
our $NEInfo   = GetNetEnable();
our $FSInfo   = GetFSInfo();

########################################################################################################################
########################################################################################################################
##
## Config server
##
########################################################################################################################
########################################################################################################################

#
# Process command line args.
#
#     -v (verbose) means "print out extra stuff"
#
my $Verbose = 0;

$Verbose = 1
    if defined $ARGV[0] and $ARGV[0] eq "-v";

#
# This will serve as the "original" config for comparison when/if a new config is written.
#
$Config = SetupConfig();

# print Data::Dumper->Dump([$Config],[qw(Config)]);
# exit(0);

########################################################################################################################
########################################################################################################################
#
# Setup a web socket and listen for connections.
#
Message("ConfigServer is up and running.")
    if $Verbose;

Message("Waiting for websocket connection")
    if $Verbose;

Site::WSServer::InitWSServer($SERVER_PORT,[],\&WebRequest,\&ConnectionRequest)->start;

exit(1);

########################################################################################################################
########################################################################################################################
#
# ConnectionRequest - Process incoming connection requests
#
# Inputs:      Connection
#              Server
#
# Outputs:     TRUE  if should accept this request
#              FALSE if should reject this request
#
sub ConnectionRequest {

    kill "USR1",getppid         # Inform server of activity
        unless $DB::single;     #   (but not if debugging)

    return 1;
    }


########################################################################################################################
########################################################################################################################
# 
#  WebRequest - Process incoming web page requests
# 
#  Inputs:      JSON encoded struct of request
#               Connection
#               Server
# 
#  Outputs:     None
# 
sub WebRequest {
    my $JSONText = shift // "";
    my $Conn     = shift;
    my $Server   = shift;
    
    kill "USR1",getppid         # Inform server of activity
        unless $DB::single;     #   (but not if debugging)

    #
    # Lots of error checking for web requests.
    #
    return Message("ConfigServer: No Web request")
        unless length $JSONText;

    my $Request = eval{decode_json $JSONText};              # Catches/avoids Croak() in lib function

    return Message("ConfigServer: Bad JSON Web request: ($JSONText)")
        unless defined $Request && (ref $Request) eq "HASH";

    $Request->{Type} //= "";
        
    return Message("WebRequest: No request type: ($JSONText)")
        unless length $Request->{Type};

    #
    # GetConfig - Return the complete system configuration struct
    #
    if( $Request->{Type} eq "GetConfig" ) {
        $Request->{Error} = "No error.";
        Message("ConfigServer: GetConfig()")
            if $Verbose;
        $Request->{State} = $Config;
        }

    #
    # SetConfig - Implement the user configuration
    #
    elsif( $Request->{Type} eq "SetConfig" ) {
        $Request->{Error} = "No error.";
        Message("ConfigServer: SetConfig()")
            if $Verbose;
        SetConfig($Request->{Arg1},$Config,$Verbose);
        }

    #
    # GetWifiList - Return list of Wifi networks
    #
    elsif( $Request->{Type} eq "GetWifiList" ) {
        Message("ConfigServer: GetWifiList()")
            if $Verbose;
        $Request->{Error} = "No error.";
        $Request->{State} = GetIWList();
#print Data::Dumper->Dump([$Request->{State}],[qw(IWList)]);
        }

    #
    # Unknown request type: Return error to caller
    #
    else {
        Message("ConfigServer: Unknown request type ($Request->{Type})")
            if $Verbose;
        }

    #
    # Pack up the error message and return the struct to the caller
    #
    SendResponse($Conn,$Request);
    }


########################################################################################################################
########################################################################################################################
#
# SetupConfig - Set up a local config struct with all the information the web page needs.
#
# Inputs:      None.
#
# Outputs:     Config struct.
#
sub SetupConfig {
    my $Config;

    #
    # SysName
    #
    $SysName = `cat /etc/hostname | tr -d " \t\n\r"`;
    $SysName = inet_ntoa(scalar gethostbyname('localhost'))
        unless length($SysName) and $SysName ne "";

    $Config->{SysName} = $SysName;

    #
    # About
    #
    my @Info = `hostnamectl`;
    chomp @Info;

    push @{$Config->{About}}, $Info[0];        # "   Static hostname: raspberrypi"
    push @{$Config->{About}}, $Info[4];        # "  Operating System: Raspbian GNU/Linux 10 (buster)"
    push @{$Config->{About}}, $Info[5];        # "            Kernel: Linux 5.4.51-v7l+"
    push @{$Config->{About}}, $Info[6];        # "      Architecture: arm"

    foreach my $Line (read_file("../etc/about")) {
        chomp $Line;

        next
            if substr($Line,0,1) eq "#";

        push @{$Config->{About}}, $Line        # Product application info
        }        

    #
    # File sharing (ie: samba) info
    #
    $Config->{FSInfo} = $FSInfo;

    #
    # Don't pass the existing WiFi password around
    #
    $Config->{WPAInfo} = $WPAInfo;
    $Config->{WPAInfo}{Password} = "(something)";

    #
    # Parse out some of the net info for easier access by the server
    #
    foreach my $IFName (reverse sort @{$NetDevs}) {
        next
            if $IFName eq "lo";

        push @{$Config->{NetDevs}},$IFName;
        $Config->{DHCPInfo}{$IFName} = {};

        my $IF = $Config->{DHCPInfo}{$IFName};

        #
        # Set up defaults so that the server doesn't have to deal with missing info
        #
        $IF->{Enabled} = 1;
        $IF->{ IPAddr} = "";
        $IF->{ Router} = "";
        $IF->{   DNS1} = "";
        $IF->{   DNS2} = "";

        $IF->{Enabled} = lc($NEInfo->{$IFName}) eq "enable" ? 1 : 0
            if defined $NEInfo->{$IFName};

        $IF->{ IPAddr} = $DHCPInfo->{$IFName}{IPAddr}
            if defined $DHCPInfo->{$IFName}{IPAddr};
        $IF->{ Router} = $DHCPInfo->{$IFName}{Router}
            if defined $DHCPInfo->{$IFName}{Router};
        $IF->{   DNS1} = $DHCPInfo->{$IFName}{DNS1}
            if defined $DHCPInfo->{$IFName}{DNS1};
        $IF->{   DNS2} = $DHCPInfo->{$IFName}{DNS2}
            if defined $DHCPInfo->{$IFName}{DNS2};

        $IF->{   DHCP} = 1;
        $IF->{   DHCP} = 0
            if defined $IF->{ IPAddr} and
               length  $IF->{ IPAddr};
        }

    return $Config;
    }


########################################################################################################################
########################################################################################################################
#
# SetConfig - Set the specified config
#
# Inputs:      Requested config state
#              Original  config state (for comparison)
#              TRUE if verbose mode
#
# Outputs:     None
#
sub SetConfig {
    my $NewState  = shift;
    my $OrigState = shift;
    my $Verbose   = shift;

    #
    # Wifi credentials
    #
    SetWPAInfo($NewState->{WPAInfo});

    #
    # File sharing
    #
    SetFSInfo($NewState->{FSInfo});

    #
    # Net enable
    #
    SetNetEnable($NewState->{DHCPInfo});

    #
    # DHCP stuff
    #
    SetDHCPInfo($NewState->{DHCPInfo});

    #
    # System name
    #
    ChangeHostname($NewState->{SysName});

#    print Data::Dumper->Dump([$NewState],["NewConfig"])
#        if $Verbose;
    }
